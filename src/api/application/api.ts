// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Auth Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    appname: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    cssClasses?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Application
     */
    allowedUsers?: Array<string>;
}

/**
 * 
 * @export
 * @interface ApplicationResponse
 */
export interface ApplicationResponse {
    /**
     * 
     * @type {string}
     * @memberof ApplicationResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationResponse
     */
    appname?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationResponse
     */
    cssClasses?: string;
}

/**
 * 
 * @export
 * @interface UpdateApplication
 */
export interface UpdateApplication {
    /**
     * 
     * @type {string}
     * @memberof UpdateApplication
     */
    appname: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateApplication
     */
    cssClasses?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateApplication
     */
    allowedUsers?: Array<string>;
}

/**
 * 
 * @export
 * @interface Updated
 */
export interface Updated {
    /**
     * 
     * @type {boolean}
     * @memberof Updated
     */
    updated: boolean;
}

/**
 * 
 * @export
 * @interface Verified
 */
export interface Verified {
    /**
     * 
     * @type {string}
     * @memberof Verified
     */
    verificationMessage: string;
}


/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {Application} application 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplication(JWT: string, xRequestID: string, SOURCE_IP: string, application: Application, options: any = {}): RequestArgs {
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling addApplication.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling addApplication.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling addApplication.');
            }
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling addApplication.');
            }
            const localVarPath = `/app`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Application" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application || {}) : (application || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add User to App
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser2App(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options: any = {}): RequestArgs {
            // verify required parameter 'appname' is not null or undefined
            if (appname === null || appname === undefined) {
                throw new RequiredError('appname','Required parameter appname was null or undefined when calling addUser2App.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling addUser2App.');
            }
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling addUser2App.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling addUser2App.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling addUser2App.');
            }
            const localVarPath = `/app/{appname}/{username}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an App
         * @param {string} appname the name the app
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApp(appname: string, JWT: string, xRequestID: string, SOURCE_IP: string, options: any = {}): RequestArgs {
            // verify required parameter 'appname' is not null or undefined
            if (appname === null || appname === undefined) {
                throw new RequiredError('appname','Required parameter appname was null or undefined when calling getApp.');
            }
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling getApp.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling getApp.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling getApp.');
            }
            const localVarPath = `/app/{appname}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Apps of User
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppOfUser(username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getAppOfUser.');
            }
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling getAppOfUser.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling getAppOfUser.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling getAppOfUser.');
            }
            const localVarPath = `/appOfUser/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all applications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(JWT: string, xRequestID: string, SOURCE_IP: string, options: any = {}): RequestArgs {
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling getApplications.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling getApplications.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling getApplications.');
            }
            const localVarPath = `/app`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {UpdateApplication} updateApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(JWT: string, xRequestID: string, SOURCE_IP: string, updateApplication: UpdateApplication, options: any = {}): RequestArgs {
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'updateApplication' is not null or undefined
            if (updateApplication === null || updateApplication === undefined) {
                throw new RequiredError('updateApplication','Required parameter updateApplication was null or undefined when calling updateApplication.');
            }
            const localVarPath = `/app`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateApplication" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateApplication || {}) : (updateApplication || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify if user is allowed for app
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserForApp(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options: any = {}): RequestArgs {
            // verify required parameter 'appname' is not null or undefined
            if (appname === null || appname === undefined) {
                throw new RequiredError('appname','Required parameter appname was null or undefined when calling verifyUserForApp.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling verifyUserForApp.');
            }
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling verifyUserForApp.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling verifyUserForApp.');
            }
            // verify required parameter 'SOURCE_IP' is not null or undefined
            if (SOURCE_IP === null || SOURCE_IP === undefined) {
                throw new RequiredError('SOURCE_IP','Required parameter SOURCE_IP was null or undefined when calling verifyUserForApp.');
            }
            const localVarPath = `/app/{appname}/{username}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (SOURCE_IP !== undefined && SOURCE_IP !== null) {
                localVarHeaderParameter['SOURCE_IP'] = String(SOURCE_IP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {Application} application 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplication(JWT: string, xRequestID: string, SOURCE_IP: string, application: Application, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).addApplication(JWT, xRequestID, SOURCE_IP, application, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Add User to App
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser2App(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Updated> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).addUser2App(appname, username, JWT, xRequestID, SOURCE_IP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get an App
         * @param {string} appname the name the app
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApp(appname: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).getApp(appname, JWT, xRequestID, SOURCE_IP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Get Apps of User
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppOfUser(username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).getAppOfUser(username, JWT, xRequestID, SOURCE_IP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary get all applications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(JWT: string, xRequestID: string, SOURCE_IP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationResponse>> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).getApplications(JWT, xRequestID, SOURCE_IP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary update an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {UpdateApplication} updateApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(JWT: string, xRequestID: string, SOURCE_IP: string, updateApplication: UpdateApplication, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).updateApplication(JWT, xRequestID, SOURCE_IP, updateApplication, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Verify if user is allowed for app
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserForApp(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Verified> {
            const localVarAxiosArgs = AppApiAxiosParamCreator(configuration).verifyUserForApp(appname, username, JWT, xRequestID, SOURCE_IP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary add an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {Application} application 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplication(JWT: string, xRequestID: string, SOURCE_IP: string, application: Application, options?: any) {
            return AppApiFp(configuration).addApplication(JWT, xRequestID, SOURCE_IP, application, options)(axios, basePath);
        },
        /**
         * 
         * @summary Add User to App
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser2App(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
            return AppApiFp(configuration).addUser2App(appname, username, JWT, xRequestID, SOURCE_IP, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get an App
         * @param {string} appname the name the app
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApp(appname: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
            return AppApiFp(configuration).getApp(appname, JWT, xRequestID, SOURCE_IP, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Apps of User
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppOfUser(username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
            return AppApiFp(configuration).getAppOfUser(username, JWT, xRequestID, SOURCE_IP, options)(axios, basePath);
        },
        /**
         * 
         * @summary get all applications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
            return AppApiFp(configuration).getApplications(JWT, xRequestID, SOURCE_IP, options)(axios, basePath);
        },
        /**
         * 
         * @summary update an application
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {UpdateApplication} updateApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(JWT: string, xRequestID: string, SOURCE_IP: string, updateApplication: UpdateApplication, options?: any) {
            return AppApiFp(configuration).updateApplication(JWT, xRequestID, SOURCE_IP, updateApplication, options)(axios, basePath);
        },
        /**
         * 
         * @summary Verify if user is allowed for app
         * @param {string} appname the name the app
         * @param {string} username the name of the user
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} SOURCE_IP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserForApp(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
            return AppApiFp(configuration).verifyUserForApp(appname, username, JWT, xRequestID, SOURCE_IP, options)(axios, basePath);
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @summary add an application
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {Application} application 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public addApplication(JWT: string, xRequestID: string, SOURCE_IP: string, application: Application, options?: any) {
        return AppApiFp(this.configuration).addApplication(JWT, xRequestID, SOURCE_IP, application, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Add User to App
     * @param {string} appname the name the app
     * @param {string} username the name of the user
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public addUser2App(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
        return AppApiFp(this.configuration).addUser2App(appname, username, JWT, xRequestID, SOURCE_IP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get an App
     * @param {string} appname the name the app
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getApp(appname: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
        return AppApiFp(this.configuration).getApp(appname, JWT, xRequestID, SOURCE_IP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Apps of User
     * @param {string} username the name of the user
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getAppOfUser(username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
        return AppApiFp(this.configuration).getAppOfUser(username, JWT, xRequestID, SOURCE_IP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary get all applications
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getApplications(JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
        return AppApiFp(this.configuration).getApplications(JWT, xRequestID, SOURCE_IP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary update an application
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {UpdateApplication} updateApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public updateApplication(JWT: string, xRequestID: string, SOURCE_IP: string, updateApplication: UpdateApplication, options?: any) {
        return AppApiFp(this.configuration).updateApplication(JWT, xRequestID, SOURCE_IP, updateApplication, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Verify if user is allowed for app
     * @param {string} appname the name the app
     * @param {string} username the name of the user
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} SOURCE_IP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public verifyUserForApp(appname: string, username: string, JWT: string, xRequestID: string, SOURCE_IP: string, options?: any) {
        return AppApiFp(this.configuration).verifyUserForApp(appname, username, JWT, xRequestID, SOURCE_IP, options)(this.axios, this.basePath);
    }

}

