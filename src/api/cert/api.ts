// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * CertService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost:8001/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Certification
 */
export interface Certification {
    /**
     * 
     * @type {string}
     * @memberof Certification
     */
    shortname: string;
    /**
     * 
     * @type {string}
     * @memberof Certification
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Certification
     */
    dateFrom: string;
    /**
     * 
     * @type {string}
     * @memberof Certification
     */
    dateTo: string;
}


/**
 * CertApi - axios parameter creator
 * @export
 */
export const CertApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add an Certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {Certification} certification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCertifaction(JWT: string, xRequestID: string, xRealIP: string, certification: Certification, options: any = {}): RequestArgs {
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling addCertifaction.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling addCertifaction.');
            }
            // verify required parameter 'xRealIP' is not null or undefined
            if (xRealIP === null || xRealIP === undefined) {
                throw new RequiredError('xRealIP','Required parameter xRealIP was null or undefined when calling addCertifaction.');
            }
            // verify required parameter 'certification' is not null or undefined
            if (certification === null || certification === undefined) {
                throw new RequiredError('certification','Required parameter certification was null or undefined when calling addCertifaction.');
            }
            const localVarPath = `/cert`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (xRealIP !== undefined && xRealIP !== null) {
                localVarHeaderParameter['X-Real-IP'] = String(xRealIP);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Certification" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(certification || {}) : (certification || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Certification
         * @param {string} shortname the shortname of the certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertification(shortname: string, JWT: string, xRequestID: string, xRealIP: string, options: any = {}): RequestArgs {
            // verify required parameter 'shortname' is not null or undefined
            if (shortname === null || shortname === undefined) {
                throw new RequiredError('shortname','Required parameter shortname was null or undefined when calling getCertification.');
            }
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling getCertification.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling getCertification.');
            }
            // verify required parameter 'xRealIP' is not null or undefined
            if (xRealIP === null || xRealIP === undefined) {
                throw new RequiredError('xRealIP','Required parameter xRealIP was null or undefined when calling getCertification.');
            }
            const localVarPath = `/cert/{shortname}`
                .replace(`{${"shortname"}}`, encodeURIComponent(String(shortname)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (xRealIP !== undefined && xRealIP !== null) {
                localVarHeaderParameter['X-Real-IP'] = String(xRealIP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Certifications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifications(JWT: string, xRequestID: string, xRealIP: string, options: any = {}): RequestArgs {
            // verify required parameter 'JWT' is not null or undefined
            if (JWT === null || JWT === undefined) {
                throw new RequiredError('JWT','Required parameter JWT was null or undefined when calling getCertifications.');
            }
            // verify required parameter 'xRequestID' is not null or undefined
            if (xRequestID === null || xRequestID === undefined) {
                throw new RequiredError('xRequestID','Required parameter xRequestID was null or undefined when calling getCertifications.');
            }
            // verify required parameter 'xRealIP' is not null or undefined
            if (xRealIP === null || xRealIP === undefined) {
                throw new RequiredError('xRealIP','Required parameter xRealIP was null or undefined when calling getCertifications.');
            }
            const localVarPath = `/cert`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (JWT !== undefined && JWT !== null) {
                localVarHeaderParameter['JWT'] = String(JWT);
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-Request-ID'] = String(xRequestID);
            }

            if (xRealIP !== undefined && xRealIP !== null) {
                localVarHeaderParameter['X-Real-IP'] = String(xRealIP);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertApi - functional programming interface
 * @export
 */
export const CertApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add an Certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {Certification} certification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCertifaction(JWT: string, xRequestID: string, xRealIP: string, certification: Certification, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certification> {
            const localVarAxiosArgs = CertApiAxiosParamCreator(configuration).addCertifaction(JWT, xRequestID, xRealIP, certification, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary get Certification
         * @param {string} shortname the shortname of the certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertification(shortname: string, JWT: string, xRequestID: string, xRealIP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certification> {
            const localVarAxiosArgs = CertApiAxiosParamCreator(configuration).getCertification(shortname, JWT, xRequestID, xRealIP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary get Certifications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifications(JWT: string, xRequestID: string, xRealIP: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Certification>> {
            const localVarAxiosArgs = CertApiAxiosParamCreator(configuration).getCertifications(JWT, xRequestID, xRealIP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * CertApi - factory interface
 * @export
 */
export const CertApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary add an Certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {Certification} certification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCertifaction(JWT: string, xRequestID: string, xRealIP: string, certification: Certification, options?: any) {
            return CertApiFp(configuration).addCertifaction(JWT, xRequestID, xRealIP, certification, options)(axios, basePath);
        },
        /**
         * 
         * @summary get Certification
         * @param {string} shortname the shortname of the certification
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertification(shortname: string, JWT: string, xRequestID: string, xRealIP: string, options?: any) {
            return CertApiFp(configuration).getCertification(shortname, JWT, xRequestID, xRealIP, options)(axios, basePath);
        },
        /**
         * 
         * @summary get Certifications
         * @param {string} JWT 
         * @param {string} xRequestID 
         * @param {string} xRealIP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifications(JWT: string, xRequestID: string, xRealIP: string, options?: any) {
            return CertApiFp(configuration).getCertifications(JWT, xRequestID, xRealIP, options)(axios, basePath);
        },
    };
};

/**
 * CertApi - object-oriented interface
 * @export
 * @class CertApi
 * @extends {BaseAPI}
 */
export class CertApi extends BaseAPI {
    /**
     * 
     * @summary add an Certification
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} xRealIP 
     * @param {Certification} certification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertApi
     */
    public addCertifaction(JWT: string, xRequestID: string, xRealIP: string, certification: Certification, options?: any) {
        return CertApiFp(this.configuration).addCertifaction(JWT, xRequestID, xRealIP, certification, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary get Certification
     * @param {string} shortname the shortname of the certification
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} xRealIP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertApi
     */
    public getCertification(shortname: string, JWT: string, xRequestID: string, xRealIP: string, options?: any) {
        return CertApiFp(this.configuration).getCertification(shortname, JWT, xRequestID, xRealIP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary get Certifications
     * @param {string} JWT 
     * @param {string} xRequestID 
     * @param {string} xRealIP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertApi
     */
    public getCertifications(JWT: string, xRequestID: string, xRealIP: string, options?: any) {
        return CertApiFp(this.configuration).getCertifications(JWT, xRequestID, xRealIP, options)(this.axios, this.basePath);
    }

}

